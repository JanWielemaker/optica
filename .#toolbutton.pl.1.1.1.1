/*  $Id: toolbutton.pl,v 1.1.1.1 1999/11/17 16:33:36 jan Exp $

    Part of Optica
    Designed and implemented by Jan Wielemaker
    E-mail: jan@swi.psy.uva.nl

    Copyright (C) 1997 University of Amsterdam. All rights reserved.
*/

:- module(toolbutton, []).
:- use_module(library(pce)).
:- use_module(library(help_message)).
:- use_module(language).
:- use_module(local(instrument)).
:- require([ default/3
	   ]).

		 /*******************************
		 *	    TOOL DIALOG		*
		 *******************************/

:- pce_begin_class(opt_tool_dialog, dialog,
		   "Holder for tools").

initialise(IH) :->
	send(IH, send_super, initialise),
	send(IH, gap, size(10, 5)).

add_tool(IH, Name:name) :->
	"Add tool button"::
	(   Name == separator
	->  send(IH, add_menu)
	;   Name == next_row
	->  send(IH, add_menu, next_row)
	;   get(IH, frame, Tool),
	    current_language(Lan),
	    current_instrument(Tool, Name, [image(Image), tag(Lan, Summary)]),
	    (   get(IH?graphicals, tail, Last),
		send(Last, instance_of, menu)
	    ->  send(Last, append,
		     new(TI, tool_icon(Name, Image, Summary))),
		(   current_instrument(Tool, Name, [condition(Cond)])
		->  send(TI, condition, Cond)
		;   true
		)
	    ;   send(IH, add_menu),
		send(IH, add_tool, Name)
	    )
	).

add_menu(IH, Where:[{right,next_row}]) :->
	"Add a new menu, unless the last is empty"::
	default(Where, right, TW),
	(   get(IH?graphicals, tail, Last),
	    send(Last, instance_of, menu),
	    get(Last?members, size, 0)
	->  true
	;   send(IH, append,
		 new(M, menu(instrument, choice,
			     message(IH?frame, instrument, @arg1))),
		 TW),
	    send(M, alignment, left),
	    send(M, multiple_selection, @on),
	    send(M, show_label, @off),
	    send(M, reference, point(0,0))
	).


instrument(IH, Instrument:name) :->
	"Select the instrument"::
	send(IH?graphicals, for_all,
	     if(message(@arg1, instance_of, menu),
		if(message(@arg1, selection, ?(@arg1, member, Instrument)),
		   new(and),
		   message(@arg1, clear_selection)))).

instrument(IH, Instrument:name) :<-
	"Find the current instrument"::
	get(IH?graphicals, find,
	    and(message(@arg1, instance_of, menu),
		not(message(@arg1?selection, empty))),
	    Menu),
	get(Menu, selection, chain(Instrument)).

deselect(IH, Tool:name) :->
	"Deselect specified button"::
	send(IH?graphicals, for_some,
	     if(message(@arg1, instance_of, menu),
		message(?(@arg1, member, Tool), selected, @off))).

update(IH, Context:any) :->
	"Update activation status of the items"::
	send(IH?graphicals, for_all,
	     if(message(@arg1, instance_of, menu),
		message(@arg1, update, Context))).

:- pce_end_class.

		 /*******************************
		 *          TOOL_ICON		*
		 *******************************/

:- pce_begin_class(tool_icon, menu_item,
		   "Item for an instrument").

initialise(MI, Instrument:name, Icon:image, Summary:[char_array]) :->
	send(MI, send_super, initialise, Instrument, label := Icon),
	send(MI, help_message, tag, Summary).

active(MI, Val:bool) :->
	"(de)activate the menu-item"::
	send(MI, send_super, active, Val),
	(   get(MI, label, Image),
	    send(Image, instance_of, image)
	->  get(Image, active, Val, Activated),
	    send(MI, label, Activated)
	;   true
	).

:- pce_end_class.


		 /*******************************
		 *         GRAYING ICONS	*
		 *******************************/

:- pce_extend_class(image).

active(Img, Active:bool, Img2:image) :<-
	"Return image with proper activation"::
	(   Active == @off
	->  (   get(Img, hypered, inactive, Img2)
	    ->	true
	    ;	get(Img, hypered, active, _)
	    ->	Img2 = Img
	    ;	get(Img, greyed, Img2)
	    )
	;   (   get(Img, hypered, active, Img2)
	    ->	true
	    ;	Img2 = Img
	    )
	).
	    

greyed(Img, Grey:image) :<-
	"Created a greyed version of a colour image"::
	(   get(Img, hypered, inactive, Grey)
	->  true
	;   get(Img, size, size(W, H)),
	    new(Grey, image(@nil, W, H, pixmap)),
	    (   get(Img, mask, Mask),
		send(Mask, instance_of, image)
	    ->  send(Grey, mask, new(M, image(@nil, W, H, bitmap))),
		new(MB, bitmap(Mask)),
		send(MB, transparent, @on),
		send(M, draw_in, MB),
		send(M, draw_in, MB, point(1,1))
	    ;   true
	    ),
	    get(Img, monochrome, I2),
	    send(Grey, background, black),
	    new(B2, bitmap(I2)),
	    send(B2, transparent, on),
	    send(B2, colour, white),
	    send(Grey, draw_in, B2, point(1,1)),
	    get(class(menu), resource, inactive_colour, Resource),
	    get(Resource, value, GreyColour),
	    send(B2, colour, GreyColour),
	    send(Grey, draw_in, B2),
	    new(_, hyper(Img, Grey, inactive, active))
	).

:- pce_end_class.
